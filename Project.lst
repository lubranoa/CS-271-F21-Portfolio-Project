Microsoft (R) Macro Assembler Version 14.29.30137.0	    12/05/21 15:37:06
)Program Template     (Proj6_lubranoa.asm		     Page 1 - 1


				TITLE Program Template     (Proj6_lubranoa.asm)

				; Author:  Alexander Lubrano
				; Last Modified:  12/04/2021
				; OSU email address: lubranoa@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6 - String Primitives and Macros        Due Date:  12/05/2021
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; --------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Dislpays a prompt to the user, gets the input from the user, stores it in a memory
				;	  location, and returns the number of characters entered in EAX for validation.
				;
				; Preconditions: Do not use EAX, ECX, or EDX as arguments. Prompt string and string array
				;	  at location of userStrLocation must be a string Byte array. The userStrBuffer is 
				;	  the buffer size (length of the string array)
				;
				; Receives:
				;	  promptStr = address of prompt string array
				;	  userStrLocation = address of temp user string holder
				;	  userStrBuffer	  = length of string array
				;
				; Returns: 
				;	  userStrLocation = address of new user-entered string
				;				  EAX = number of characters entered
				;
				; --------------------------------------------------------------------------------------
				mGetString MACRO promptStr, userStrLocation, userStrBuffer
					push	ecx
					push	edx
					
					; display prompt
					mDisplayString	promptStr

					; Get user input and store at memory location in EDX
					mov		edx, userStrLocation	; Replaced by a memory location to store an entered string
					mov		ecx, userStrBuffer		; Replaced by an integer of how large the buffer is
					call	ReadString

					; ----------------------------------------------------------------------------------
					; The EAX register is not preserved or restored because it will hold the number of 
					;	  entered characters, excluding a null terminator, which will be used to check
					;	  the user entered nothing or something too big.
					;
					; ----------------------------------------------------------------------------------
					pop		edx
					pop		ecx

				ENDM

				; --------------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints a string from a provided memory location.
				;
				; Preconditions: Do not use EDX as an argument. Placeholder argument must be a 4 Byte
				;     memory location. The array at that location must be a string Byte array.
				;
				; Receives:
				;	  strLocation = string array address
				;
				; Returns: None
				;
				; --------------------------------------------------------------------------------------
				mDisplayString	 MACRO   strLocation
					
					; Prints string Byte array to console
					push	edx
					mov		edx, strLocation	; strLocation placeholder is replaced by a memory offest
					call	WriteString
					pop		edx

				ENDM

 = 80000000			MIN_VALUE	 = 80000000h
 = 7FFFFFFF			MAX_VALUE	 = 7FFFFFFFh
 = 0000000B			MAX_STR_SIZE = 11
 = 0000002B			PLUS_ASCII	 = 43
 = 0000002D			MINUS_ASCII	 = 45
 = 00000030			ZERO_ASCII	 = 48
 = 00000039			NINE_ASCII	 = 57

 00000000			.data
				; Descriptive string Byte arrays for printing to console
 00000000 43 53 20 32 37	titleStr	BYTE	"CS 271 ASSIGNMENT 6: Designing Low-Level I/O Procedures",13,10,"Written by: Alexander Lubrano",13,10,0
	   31 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 4C 6F 77 2D
	   4C 65 76 65 6C
	   20 49 2F 4F 20
	   50 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 57 72 69
	   74 74 65 6E 20
	   62 79 3A 20 41
	   6C 65 78 61 6E
	   64 65 72 20 4C
	   75 62 72 61 6E
	   6F 0D 0A 00
 00000059 50 6C 65 61 73	introStr	BYTE	"Please provide 10 signed decimal integers.",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   62 65 20 73 6D
	   61 6C 6C 20 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 61 61 20 33
	   32 2D 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   20 41 66 74 65
	   72 20 79 6F 75
	   20 68 61 76 65
	   0D 0A 66 69 6E
	   69 73 68 65 64
	   20 65 6E 74 65
	   72 69 6E 67 20
	   74 68 65 20 72
	   61 77 20 6E 75
	   6D 62 65 72 73
	   2C 20 74 68 69
	   73 20 70 72 6F
	   67 72 61 6D 20
	   77 69 6C 6C 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   6C 69 73 74 20
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 0D 0A 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 69 72 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 2E 0D 0A
	   00
									"Each number needs to be small enough to fit inside aaa 32-bit register. After you have",13,10,
									"finished entering the raw numbers, this program will display a list of the integers, their",13,10,
									"sum, and their average value.",13,10,0
 00000159 50 6C 65 61 73	promptStr	BYTE	"Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 00000179 45 52 52 4F 52	errorStr	BYTE	"ERROR: You did not enter a signed integer or your integer was too big.",13,10,"Please try again: ",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 69
	   6E 74 65 67 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   69 6E 74 65 67
	   65 72 20 77 61
	   73 20 74 6F 6F
	   20 62 69 67 2E
	   0D 0A 50 6C 65
	   61 73 65 20 74
	   72 79 20 61 67
	   61 69 6E 3A 20
	   00
 000001D4 59 6F 75 20 65	listStr		BYTE	"You entered the following numbers: ",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 000001FA 54 68 65 20 73	sumStr		BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000218 54 68 65 20 74	avgStr		BYTE	"The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000233 48 6F 70 65 20	byeStr		BYTE	"Hope this was fun!",13,10,"- Alex",0
	   74 68 69 73 20
	   77 61 73 20 66
	   75 6E 21 0D 0A
	   2D 20 41 6C 65
	   78 00
				; Data manipulation helpers
 0000024E  0000000D [		userStr		BYTE	13 DUP(0)	; Holds entered strings in ReadVal, helps WriteVal with conversion and holds WriteVal's final string array
	    00
	   ]
 0000025B 00000001		mulHelper	SDWORD	1			; Holds a value to help multiply values in ASCII to digit conversion
 0000025F 00000000		userNum		SDWORD	0			; Helps ReadVal procedure with conversion and holds ReadVal's final number
 00000263  0000000A [		userArray	SDWORD	10 DUP(?)	; Will hold numbers converted from user number strings
	    00000000
	   ]
 0000028B 00000000		sumNum		SDWORD	0			; Helps with keeping track of the sum of the numbers
 0000028F  0000000D [		revStr		BYTE	13 DUP(0)
	    00
	   ]

 00000000			.code
 00000000			main PROC

					mDisplayString offset titleStr	; Display title string
 00000000  52		     1		push	edx
 00000001  BA 00000000 R     1		mov		edx, offset titleStr	; strLocation placeholder is replaced by a memory offest
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop		edx
 0000000C  E8 00000000 E		call	CrLf

					mDisplayString offset introStr	; Display introduction string
 00000011  52		     1		push	edx
 00000012  BA 00000059 R     1		mov		edx, offset introStr	; strLocation placeholder is replaced by a memory offest
 00000017  E8 00000000 E     1		call	WriteString
 0000001C  5A		     1		pop		edx
 0000001D  E8 00000000 E		call	CrLf

 00000022  B9 0000000A			mov		ecx, 10					; Initialize ECX to 10 for loop below

					; ----------------------------------------------------------------------------------
					; Loop 10 times to get 10 number strings from user, gets ReadVal to validate and 
					;	  convert them, finds their correct index in userArray, and stores them there.
					;
					; ----------------------------------------------------------------------------------
 00000027				_getNumberLoop:
						
						; Push parameters to stack for ReadVal, and call ReadVal to get input from user
 00000027  68 00000159 R			push	offset promptStr			; Push address of promptStr string array (input parameter)
 0000002C  68 00000179 R			push	offset errorStr				; Push address of errorStr string array (input)
 00000031  68 0000024E R			push	offset userStr				; Push address of userStr helper string array (input/output)
 00000036  68 0000000D				push	DWORD ptr SIZEOF userStr	; Push length of userStr string array (input)
 0000003B  68 0000025F R			push	offset userNum				; Push address of userNum helper label (output)
 00000040  68 0000025B R			push	offset mulHelper			; Push address of mulHelper helper label (input/output)
 00000045  E8 00000146				call	ReadVal

						; ------------------------------------------------------------------------------
						; Take value in userNum and put it in its correct index of the userArray. This 
						;	  finds the correct index value using this equation: 
						;	  
						;	  Address of array[n] = (address of array) + (n * (TYPE of element))
						;
						; ------------------------------------------------------------------------------
 0000004A  BF 00000263 R			mov		edi, offset	userArray		
 0000004F  B8 0000000A				mov		eax, 10
 00000054  2B C1				sub		eax, ecx					; Gets correct index position (n)
 00000056  BB 00000004				mov		ebx, TYPE userArray
 0000005B  F7 E3				mul		ebx							; Gets correct Byte index position (n * (TYPE of element))
 0000005D  8B D8				mov		ebx, eax
 0000005F  A1 0000025F R			mov		eax, userNum				; Gets new number
 00000064  89 04 1F				mov		[edi+ebx], eax				; Puts new number at (address of list) + (n * (TYPE of element))

 00000067  BF 0000025F R			mov		edi, offset userNum
 0000006C  C7 07 00000000			mov		SDWORD ptr [edi], 0			; Clear userNum label

 00000072  E2 B3				loop	_getNumberLoop

 00000074  E8 00000000 E		call	CrLf
					mDisplayString offset listStr
 00000079  52		     1		push	edx
 0000007A  BA 000001D4 R     1		mov		edx, offset listStr	; strLocation placeholder is replaced by a memory offest
 0000007F  E8 00000000 E     1		call	WriteString
 00000084  5A		     1		pop		edx
					
 00000085  B9 0000000A			mov		ecx, 10
 0000008A				_writeLoop:
 0000008A  BE 00000263 R			mov		esi, offset	userArray		
 0000008F  B8 0000000A				mov		eax, 10
 00000094  2B C1				sub		eax, ecx
 00000096  BB 00000004				mov		ebx, TYPE userArray
 0000009B  F7 E3				mul		ebx
 0000009D  8B D8				mov		ebx, eax

 0000009F  8B 04 1E				mov		eax, [esi+ebx]
 000000A2  01 05 0000028B R			add		sumNum, eax

 000000A8  FF 34 1E				push	SDWORD ptr [esi+ebx]
 000000AB  68 0000024E R			push	offset userStr
 000000B0  68 0000028F R			push	offset revStr
 000000B5  68 0000000A				push	SDWORD ptr 10
 000000BA  E8 000001ED				call	WriteVal

 000000BF  83 F9 01				cmp		ecx, 1
 000000C2  74 24				jz		_doneLooping
 000000C4  B0 2C				mov		al, ','
 000000C6  E8 00000000 E			call	WriteChar
 000000CB  B0 20				mov		al, ' '
 000000CD  E8 00000000 E			call	WriteChar

						; Clear userStr and revStr for use again later
 000000D2  68 0000024E R			push	offset userStr
 000000D7  E8 0000024F				call	clearUserStr
 000000DC  68 0000028F R			push	offset revStr
 000000E1  E8 00000245				call	clearUserStr
						
 000000E6  E2 A2				loop	_writeLoop

 000000E8				_doneLooping:
 000000E8  E8 00000000 E			call	CrLf
					
					; Clear userStr and revStr for use again later
 000000ED  68 0000024E R		push	offset userStr
 000000F2  E8 00000234			call	clearUserStr
 000000F7  68 0000028F R		push	offset revStr
 000000FC  E8 0000022A			call	clearUserStr
					
					mDisplayString offset sumStr
 00000101  52		     1		push	edx
 00000102  BA 000001FA R     1		mov		edx, offset sumStr	; strLocation placeholder is replaced by a memory offest
 00000107  E8 00000000 E     1		call	WriteString
 0000010C  5A		     1		pop		edx
 0000010D  FF 35 0000028B R		push	sumNum
 00000113  68 0000024E R		push	offset userStr
 00000118  68 0000028F R		push	offset revStr
 0000011D  68 0000000A			push	SDWORD ptr 10
 00000122  E8 00000185			call	WriteVal
 00000127  E8 00000000 E		call	CrLf

					; Clear userStr and revStr for use again later
 0000012C  68 0000024E R		push	offset userStr
 00000131  E8 000001F5			call	clearUserStr
 00000136  68 0000028F R		push	offset revStr
 0000013B  E8 000001EB			call	clearUserStr

					mDisplayString offset avgStr
 00000140  52		     1		push	edx
 00000141  BA 00000218 R     1		mov		edx, offset avgStr	; strLocation placeholder is replaced by a memory offest
 00000146  E8 00000000 E     1		call	WriteString
 0000014B  5A		     1		pop		edx
 0000014C  A1 0000028B R		mov		eax, sumNum
 00000151  BB 0000000A			mov		ebx, 10
 00000156  99				cdq
 00000157  F7 FB			idiv	ebx	
 00000159  50				push	eax
 0000015A  68 0000024E R		push	offset userStr
 0000015F  68 0000028F R		push	offset revStr
 00000164  68 0000000A			push	SDWORD ptr 10
 00000169  E8 0000013E			call	WriteVal
 0000016E  E8 00000000 E		call	CrLf
 00000173  E8 00000000 E		call	CrLf
					
					mDisplayString offset byeStr
 00000178  52		     1		push	edx
 00000179  BA 00000233 R     1		mov		edx, offset byeStr	; strLocation placeholder is replaced by a memory offest
 0000017E  E8 00000000 E     1		call	WriteString
 00000183  5A		     1		pop		edx
 00000184  E8 00000000 E		call	CrLf

					Invoke ExitProcess,0	; exit to operating system
 00000189  6A 00	   *	    push   +000000000h
 0000018B  E8 00000000 E   *	    call   ExitProcess
 00000190			main ENDP

				; --------------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Invokes the mGetString macro to get a user-entered number, then converts the string of
				;	  characters to its numerical value, validating along the way that it has no symbols 
				;	  or letters, small enough to fit inside a 32-bit register, and that the user did 
				;	  not just enter nothing.
				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:
				;	  [ebp+28]  = address of prompt string array
				;	  [ebp+24]  = address of error prompt string array
				;	  [ebp+20]  = address of the temp user string array
				;	  [ebp+16]  = number of characters the temp user string array can hold
				;	  [ebp+12]  = address of temp user number label
				;	  [ebp+8]   = address of multiplication helper label
				;
				; Returns: 
				;	  EAX		= converted number from user string
				; --------------------------------------------------------------------------------------
 00000190			ReadVal PROC
					; Preserve used registers and assign static stack-fram pointer
 00000190  55				push	ebp
 00000191  8B EC			mov		ebp, esp
 00000193  50				push	eax
 00000194  53				push	ebx
 00000195  51				push	ecx
 00000196  52				push	edx			; May be overwritten after IMUL instructions so, preserve EDX just in case
 00000197  56				push	esi
 00000198  57				push	edi

					; Get new number string using mGetString macro with placeholders, address of promptStr,
					; address of userStr array label, and size of userStr array
					mGetString	DWORD ptr [ebp+28], DWORD ptr [ebp+20], DWORD ptr [ebp+16]
 00000199  51		     1		push	ecx
 0000019A  52		     1		push	edx
 0000019B  52		     2		push	edx
 0000019C  8B 55 1C	     2		mov		edx, DWORD ptr [ebp+28]	; strLocation placeholder is replaced by a memory offest
 0000019F  E8 00000000 E     2		call	WriteString
 000001A4  5A		     2		pop		edx
 000001A5  8B 55 14	     1		mov		edx, DWORD ptr [ebp+20]	; Replaced by a memory location to store an entered string
 000001A8  8B 4D 10	     1		mov		ecx, DWORD ptr [ebp+16]		; Replaced by an integer of how large the buffer is
 000001AB  E8 00000000 E     1		call	ReadString
 000001B0  5A		     1		pop		edx
 000001B1  59		     1		pop		ecx
 000001B2  EB 33			jmp		_validate

					; Get a different numeer string after an invalid input
 000001B4				_invalidInput:
 000001B4  FF 75 14				push	DWORD ptr [ebp+20]
 000001B7  E8 0000016F				call	clearUserStr			; Clear userStr helper label to prep for new input
 000001BC  8B 7D 0C				mov		edi, [ebp+12]
 000001BF  C7 07 00000000			mov		SDWORD ptr [edi], 0		; Reset the userNum helper label to 0
 000001C5  8B 7D 08				mov		edi, [ebp+8]
 000001C8  C7 07 00000001			mov		SDWORD ptr [edi], 1		; Reset the mulHelper label to 1

						; Get another number string from user using the same macro with placeholders, address 
						; of errorStr, address of userStr array label, and size of userStr array
						mGetString	DWORD ptr [ebp+24], DWORD ptr[ebp+20], DWORD ptr [ebp+16]
 000001CE  51		     1		push	ecx
 000001CF  52		     1		push	edx
 000001D0  52		     2		push	edx
 000001D1  8B 55 18	     2		mov		edx, DWORD ptr [ebp+24]	; strLocation placeholder is replaced by a memory offest
 000001D4  E8 00000000 E     2		call	WriteString
 000001D9  5A		     2		pop		edx
 000001DA  8B 55 14	     1		mov		edx, DWORD ptr[ebp+20]	; Replaced by a memory location to store an entered string
 000001DD  8B 4D 10	     1		mov		ecx, DWORD ptr [ebp+16]		; Replaced by an integer of how large the buffer is
 000001E0  E8 00000000 E     1		call	ReadString
 000001E5  5A		     1		pop		edx
 000001E6  59		     1		pop		ecx
					
					; ----------------------------------------------------------------------------------
					; Check user's input for validity. The user string number cannot be nothing, cannot
					;	  be greater than 11 digits long, cannot contain characters other than -, +, or
					;	  the digits 0 through 9, nor can it be larger than what a 32-bit register can
					;	  contain (-2^31 to 2^31 - 1). 
					;
					; The number string can be 11 digits long because a number string starting with a
					;	  +/- will be 10 digits long, which is the number of digits of the max value a 
					;	  32-bit register can hold, i.e., -2^31 is equal tO -2,147,483,648, which is 10 
					;	  digits and a sign. 
					;
					; ----------------------------------------------------------------------------------
 000001E7				_validate:
 000001E7  83 F8 00				cmp		eax, 0
 000001EA  74 C8				jz		_invalidInput			; If user input nothing, jump up to _invalidInput block
 000001EC  83 F8 0B				cmp		eax, MAX_STR_SIZE
 000001EF  77 C3				ja		_invalidInput			; If user input something too large, jump up to _invalidInput block

						; ------------------------------------------------------------------------------
						; At this point, if number string has either sign at the 1st index, we can start 
						;	  to convert and check for more accurate out of range conditions.
						;
						; ------------------------------------------------------------------------------
 000001F1  8B 75 14				mov		esi, [ebp+20]
 000001F4  80 3E 2B				cmp		BYTE ptr [esi], PLUS_ASCII
 000001F7  74 0A				jz		_convertNum				; If user input has a '+' at index 0, jump to convert
 000001F9  80 3E 2D				cmp		BYTE ptr [esi], MINUS_ASCII
 000001FC  74 05				jz		_convertNum				; If user input has a '-' at index 0, jump to convert
 000001FE  83 F8 0B				cmp		eax, MAX_STR_SIZE
 00000201  74 B1				jz		_invalidInput			; If user input has 11 characters but no sign, it's too big so, jump to _invalidInput
						
					; ----------------------------------------------------------------------------------
					; Convert the string to an integer. Each character is checked for being a digit 0-9,
					;	  and, if it is not, the number string is invalid, unless it is a + or - and it
					;	  is the leftmost character in the string.
					;
					; This conversion relies on starting at the last character in the array, and moving
					;	  left until the beginning is reached. Each successive iteration is multiplied
					;	  by a power of 10 to get its proper decimal position, then added to a running 
					;     total.
					;
					; ----------------------------------------------------------------------------------
 00000203				_convertNum:		
						
 00000203  8B C8				mov		ecx, eax				; Initialize ECX to the number of entered characters
 00000205  8B 75 14				mov		esi, [ebp+20]			; Initialize ESI to point to address of user input string
 00000208  03 F1				add		esi, ecx
 0000020A  4E					dec		esi						; Points ESI at the last value of the user string
 0000020B  8B 7D 0C				mov		edi, [ebp+12]			; Initialize EDI to point to the temp user number label's address
 0000020E  BB 0000000A				mov		ebx, 10					; Initialize EBX to hold the value 10
						
						
						; Top of loop
 00000213					_convertNumLoop:
 00000213  33 C0					xor		eax, eax					; Clear EAX each iteration
 00000215  83 F9 01					cmp		ecx, 1
 00000218  74 3B					jz		_lastCharacter				; If ECX is 1, current character is leftmost(last) so, jump to _lastCharacter
 0000021A  80 3E 30					cmp		BYTE ptr [esi], ZERO_ASCII
 0000021D  72 95					jb		_invalidInput
 0000021F  80 3E 39					cmp		BYTE ptr [esi], NINE_ASCII
 00000222  77 90					ja		_invalidInput				; Else, if current character != any digit ASCII, number is invalid so, jump to _invalidInput
							
						; Update value in userNum helper data label
 00000224					_updateUserNum:
							
							; Get character's actual value (all characters that reach this block are digits 0-9)
 00000224  8A 06					mov		al, [esi]
 00000226  2C 30					sub		al, ZERO_ASCII				; Subtract ZERO_ASCII value from character's ASCII value to get its numerical value
							
							; Multiply this iteration by its power of 10 (first iteration is multiplied by 1)
 00000228  56						push	esi
 00000229  52						push	edx
 0000022A  8B 75 08					mov		esi, [ebp+8]				; Put address of multiplication helper in ESI
 0000022D  F7 2E					imul	DWORD ptr [esi]				; Multiply value in EAX by value in multiplication helper
 0000022F  70 83					jo		_invalidInput				; If the multiplication resulted in an overflow condition, the number is too big
 00000231  5A						pop		edx
 00000232  5E						pop		esi

							; Add the value in EAX to the value in the UserNum label to update running total
 00000233  01 07					add		[edi], eax
 00000235  0F 80 FFFFFF79				jo		_invalidInput				; If addition resulted in an overflow condition, the number is too big
							
							; If this is the last or 2nd to last character, they must be handled differently
 0000023B  83 F9 01					cmp		ecx, 1
 0000023E  74 51					jz		_end						; If this is the last digit, don't need to update mulHelper so, jump to _end
 00000240  83 F9 02					cmp		ecx, 2
 00000243  77 36					ja		_updateHelpers				; Else, if value is not 2nd to last, jump to _updateHelpers
																; Otherwise, continue down

 00000245					_secondToLast:
 00000245  49						dec		ecx							; Pre-decrement ECX in case of jump to top of loop
 00000246  4E						dec		esi							; Pre-decrement ESI in case of jump to top of loop
 00000247  80 3E 30					cmp		BYTE ptr [esi], ZERO_ASCII
 0000024A  72 C7					jb		_convertNumLoop
 0000024C  80 3E 39					cmp		BYTE ptr [esi], NINE_ASCII
 0000024F  77 C2					ja		_convertNumLoop				; If the character is not a digit, loop back to top
 00000251  41						inc		ecx
 00000252  46						inc		esi
 00000253  EB 26					jmp		_updateHelpers				; Otherwise, character = digit so, re-increment ECX and ESI then jump to _updateHelpers
						
 00000255					_lastCharacter:
 00000255  80 3E 2D					cmp		BYTE ptr [esi], MINUS_ASCII
 00000258  74 19					jz		_convertNegNum				; If last character ASCII = minus sign ASCII, jump to _convertNegNum
 0000025A  80 3E 2B					cmp		BYTE ptr [esi], PLUS_ASCII
 0000025D  74 32					jz		_end						; Else, if last character ASCII = plus sign ASCII, jump to _end
 0000025F  80 3E 30					cmp		BYTE ptr [esi], ZERO_ASCII
 00000262  0F 82 FFFFFF4C				jb		_invalidInput
 00000268  80 3E 39					cmp		BYTE ptr [esi], NINE_ASCII
 0000026B  0F 87 FFFFFF43				ja		_invalidInput				; Else, if last character != digit ASCII, the number is invalid so, jump to _invalidInput
 00000271  EB B1					jmp		_updateUserNum				; Else, last character = digit so, jump to _updateUserNum


						; Convert negative string to negative integer
 00000273					_convertNegNum:
 00000273  8B 07					mov		eax, [edi]
 00000275  F7 D8					neg		eax
 00000277  89 07					mov		[edi], eax
 00000279  EB 16					jmp		_end						; If execution reaches this block, it's done converting and can break out of loop

						; Updates mulitplication helper and ESI for next iteration, only when not on last and sometimes 2nd to last iterations
 0000027B					_updateHelpers:
							
							; Multiplies the value in the mulHelper label by 10 to get the next power of 10
 0000027B  57						push	edi
 0000027C  52						push	edx
 0000027D  8B 7D 08					mov		edi, [ebp+8]
 00000280  8B 07					mov		eax, [edi]					; Put current power of 10 value in EAX, then multiply by 10
 00000282  F7 EB					imul	ebx
 00000284  0F 80 FFFFFF2A				jo		_invalidInput				; If this results in an overflow condition, the next value will too so, jump to _invalidInput
 0000028A  89 07					mov		[edi], eax					; Otherwise, store the result in mulHelper
 0000028C  5A						pop		edx
 0000028D  5F						pop		edi
							
							; Decrement address in ESI to point to next character that is 1 Byte below current one in memory
 0000028E  4E						dec		esi
							
							; When ECX is 0, execution moves to next line of code below
 0000028F  E2 82					loop	_convertNumLoop				

					; Clears the helper string, resets mulHelper to 1
 00000291				_end:
 00000291  FF 75 14				push	DWORD ptr [ebp+20]
 00000294  E8 00000092				call	clearUserStr
 00000299  8B 7D 08				mov		edi, [ebp+8]
 0000029C  C7 07 00000001			mov		SDWORD ptr [edi], 1
					
					; Restore used registers, de-reference 24 Bytes of parameters, and return control to main
 000002A2  5F				pop		edi
 000002A3  5E				pop		esi
 000002A4  5A				pop		edx
 000002A5  59				pop		ecx
 000002A6  5B				pop		ebx
 000002A7  58				pop		eax
 000002A8  5D				pop		ebp
 000002A9  C2 0018			ret		24

 000002AC			ReadVal ENDP

				; --------------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Converts a numeric Signed Doubleword data type to a string of ASCII characters.
				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:
				;	  [ebp+20]  = the value to convert
				;	  [ebp+16]	= address of userStr label
				;	  [ebp+12]	= address of revStr label
				;	  [ebp+8]	= the value 10
				;
				; Returns: 
				; --------------------------------------------------------------------------------------
 000002AC			WriteVal PROC

					; Preserve used registers and assign static stack-fram pointer
 000002AC  55				push	ebp
 000002AD  8B EC			mov		ebp, esp
 000002AF  50				push	eax
 000002B0  51				push	ecx
 000002B1  52				push	edx
 000002B2  56				push	esi
 000002B3  57				push	edi

 000002B4  8B 45 14			mov		eax, [ebp+20]	; Put value to convert into EAX
 000002B7  8B 7D 0C			mov		edi, [ebp+12]	; Point EDI to first address of reverse string
 000002BA  33 C9			xor		ecx, ecx

 000002BC  83 F8 00			cmp		eax, 0
 000002BF  74 50			jz		_inputIsZero
					
 000002C1				_convertStrLoop:
 000002C1  83 F8 00				cmp		eax, 0
 000002C4  74 3A				jz		_revToCorrect
 000002C6  33 D2				xor		edx, edx
 000002C8  99					cdq
 000002C9  F7 7D 08				idiv	SDWORD ptr [ebp+8]
 000002CC  83 FA 00				cmp		edx, 0
 000002CF  7C 08				jl		_convertNegStr
 000002D1  50					push	eax						; Preserve conversion value
 000002D2  8B C2				mov		eax, edx
 000002D4  83 C0 30				add		eax, ZERO_ASCII
 000002D7  EB 21				jmp		_addToRevStr

 000002D9				_convertNegStr:		
 000002D9  83 F8 00				cmp		eax, 0
 000002DC  74 0C				jz		_addNegativeSign
 000002DE  F7 DA				neg		edx
 000002E0  50					push	eax						; Preserve conversion value
 000002E1  8B C2				mov		eax, edx
 000002E3  83 C0 30				add		eax, ZERO_ASCII
 000002E6  F7 DA				neg		edx
 000002E8  EB 10				jmp		_addToRevStr

 000002EA				_addNegativeSign:
 000002EA  F7 DA				neg		edx
 000002EC  50					push	eax						; Preserve conversion value
 000002ED  8B C2				mov		eax, edx
 000002EF  83 C0 30				add		eax, ZERO_ASCII
 000002F2  FC					cld
 000002F3  AA					STOSB							; Store last remainder's ascii
 000002F4  B8 0000002D				mov		eax, MINUS_ASCII
 000002F9  41					inc		ecx

 000002FA				_addToRevStr:
 000002FA  FC					cld
 000002FB  AA					STOSB
 000002FC  58					pop		eax						; Restore conversion value
 000002FD  41					inc		ecx
 000002FE  EB C1				jmp		_convertStrLoop
					
 00000300				_revToCorrect:
 00000300  8B 75 0C				mov		esi, [ebp+12]
 00000303  03 F1				add		esi, ecx
 00000305  4E					dec		esi
 00000306  8B 7D 10				mov		edi, [ebp+16]

 00000309					_revLoop:
 00000309  FD						std
 0000030A  AC						LODSB
 0000030B  FC						cld
 0000030C  AA						STOSB
 0000030D  E2 FA					loop	_revLoop

 0000030F  EB 07				jmp		_end

 00000311				_inputIsZero:
 00000311  8B 7D 10				mov		edi, [ebp+16]
 00000314  B0 30				mov		al, ZERO_ASCII
 00000316  FC					cld
 00000317  AA					STOSB
					
 00000318				_end:
					mDisplayString	DWORD ptr [ebp+16]
 00000318  52		     1		push	edx
 00000319  8B 55 10	     1		mov		edx, DWORD ptr [ebp+16]	; strLocation placeholder is replaced by a memory offest
 0000031C  E8 00000000 E     1		call	WriteString
 00000321  5A		     1		pop		edx

					; Restore used registers, de-reference 8 Bytes of parameters, and return control to main
 00000322  5F				pop		edi
 00000323  5E				pop		esi
 00000324  5A				pop		edx
 00000325  59				pop		ecx
 00000326  58				pop		eax
 00000327  5D				pop		ebp
 00000328  C2 0010			ret		16
 0000032B			WriteVal ENDP

				; --------------------------------------------------------------------------------------
				; Name: clearUserStr
				;
				; Clears the userStr helper array for a new entry by changing all the bytes to 0 excpt
				;	  the null terminator.
				;
				; Preconditions: The helper array must be a 13 Byte string array, including the null
				;	  terminator
				;
				; Postconditions: All used registers are preserved and restored.
				;
				; Receives:
				;	  [ebp+8]  = address of userStr array
				;
				; Returns: 
				;	  userStr  = empty 13-Byte array
				; --------------------------------------------------------------------------------------
 0000032B			clearUserStr PROC
					
					; Preserve used registers and assign static stack-fram pointer
 0000032B  55				push	ebp
 0000032C  8B EC			mov		ebp, esp
 0000032E  51				push	ecx
 0000032F  57				push	edi

					; Initialize ECX to the number of Bytes to replace and EDI to point to the address of the array to modify
 00000330  B9 0000000C			mov		ecx, 12
 00000335  8B 7D 08			mov		edi, [ebp+8]
					
					; Set each Byte in the array to 0
 00000338				_clearLoop:
 00000338  C6 07 00				mov		BYTE ptr [edi], 0
 0000033B  83 C7 01				add		edi, 1		; Increment address in EDI by 1 Byte
 0000033E  E2 F8				loop	_clearLoop

					; Restore used registers, de-reference 4 Bytes of parameters, and return control to calling procedure
 00000340  5F				pop		edi
 00000341  59				pop		ecx
 00000342  5D				pop		ebp
 00000343  C2 0004			ret		4

 00000346			clearUserStr ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30137.0	    12/05/21 15:37:06
)Program Template     (Proj6_lubranoa.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000029C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000346 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000190 _TEXT	Length= 0000011C Public STDCALL
  _invalidInput  . . . . . . . .	L Near	 000001B4 _TEXT	
  _validate  . . . . . . . . . .	L Near	 000001E7 _TEXT	
  _convertNum  . . . . . . . . .	L Near	 00000203 _TEXT	
  _convertNumLoop  . . . . . . .	L Near	 00000213 _TEXT	
  _updateUserNum . . . . . . . .	L Near	 00000224 _TEXT	
  _secondToLast  . . . . . . . .	L Near	 00000245 _TEXT	
  _lastCharacter . . . . . . . .	L Near	 00000255 _TEXT	
  _convertNegNum . . . . . . . .	L Near	 00000273 _TEXT	
  _updateHelpers . . . . . . . .	L Near	 0000027B _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000291 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000002AC _TEXT	Length= 0000007F Public STDCALL
  _convertStrLoop  . . . . . . .	L Near	 000002C1 _TEXT	
  _convertNegStr . . . . . . . .	L Near	 000002D9 _TEXT	
  _addNegativeSign . . . . . . .	L Near	 000002EA _TEXT	
  _addToRevStr . . . . . . . . .	L Near	 000002FA _TEXT	
  _revToCorrect  . . . . . . . .	L Near	 00000300 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000309 _TEXT	
  _inputIsZero . . . . . . . . .	L Near	 00000311 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000318 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
clearUserStr . . . . . . . . . .	P Near	 0000032B _TEXT	Length= 0000001B Public STDCALL
  _clearLoop . . . . . . . . . .	L Near	 00000338 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000190 Public STDCALL
  _getNumberLoop . . . . . . . .	L Near	 00000027 _TEXT	
  _writeLoop . . . . . . . . . .	L Near	 0000008A _TEXT	
  _doneLooping . . . . . . . . .	L Near	 000000E8 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_STR_SIZE . . . . . . . . . .	Number	 0000000Bh   
MAX_VALUE  . . . . . . . . . . .	Number	 7FFFFFFFh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINUS_ASCII  . . . . . . . . . .	Number	 0000002Dh   
MIN_VALUE  . . . . . . . . . . .	Number	 -80000000h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NINE_ASCII . . . . . . . . . . .	Number	 00000039h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS_ASCII . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO_ASCII . . . . . . . . . . .	Number	 00000030h   
avgStr . . . . . . . . . . . . .	Byte	 00000218 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byeStr . . . . . . . . . . . . .	Byte	 00000233 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorStr . . . . . . . . . . . .	Byte	 00000179 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
introStr . . . . . . . . . . . .	Byte	 00000059 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listStr  . . . . . . . . . . . .	Byte	 000001D4 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
mulHelper  . . . . . . . . . . .	DWord	 0000025B _DATA	
promptStr  . . . . . . . . . . .	Byte	 00000159 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
revStr . . . . . . . . . . . . .	Byte	 0000028F _DATA	
sumNum . . . . . . . . . . . . .	DWord	 0000028B _DATA	
sumStr . . . . . . . . . . . . .	Byte	 000001FA _DATA	
titleStr . . . . . . . . . . . .	Byte	 00000000 _DATA	
userArray  . . . . . . . . . . .	DWord	 00000263 _DATA	
userNum  . . . . . . . . . . . .	DWord	 0000025F _DATA	
userStr  . . . . . . . . . . . .	Byte	 0000024E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
